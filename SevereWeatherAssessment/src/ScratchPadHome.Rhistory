sum(is.na($Ozone))
sapply(airquality, function(x) sum(is.na(x)))
?colMeans
colMeans(x,na.rm = TRUE, dims =1)
x
sapply(airquality, function(x) sum(is.na(x)))
colMeans((x),na.rm = TRUE, dims =1)
mean(x, na.rm=TRUE)
x = read.csv("./Downloads/hw1_data.csv")
x
mean(x, na.rm=TRUE)
mean(x, na.rm=TRUE, dims=1)
colMeans(x, na.rm=TRUE, dims=1)
subset(x, Ozone > 31 & Temp > 90)
x
subset(dataset, Month == 6
)
susbset(x, Month ==6)
subset(x, MOnth ==6 )
subset (x, Month == 6)
june <- subset (x, Month == 6)
june
mean(june[use "Temp"])
mean(june[, "Temp"], na.rm = TRUE)
may <- subset (x, Month == 5)
may
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
sol = subset(x, Ozone > 31 & Temp > 90)
sol <- subset(x, Ozone > 31 & Temp > 90)
x = read.csv("./Downloads/hw1_data.csv")
sol <- subset(x, Ozone > 31 & Temp > 90)
mean(sol)
mean(sol[, "Solar.R"], na.rm = TRUE)
x <- 1:4
y <- 2:3
x + y
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_loc <- directory
pollutant <- tolower(pollutant)
# default working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
directory
}
pollutantmean()
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_loc <- directory
pollutant <- tolower(pollutant)
# default working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
directory
}
pollutantmean(d)
pollutantmean(specdata)
source(~leila/R-prog/pollutantmean.R)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_loc <- directory
pollutant <- tolower(pollutant)
# default working directory
if(grep("specdata", directory) == 1) {
directory <- ("~leila/R-prog/specdata/")
}
directory
}
pollutantmean(specdata)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_loc <- directory
pollutant <- tolower(pollutant)
# default working directory
setwd("/users/leila/R-prog/")
getwd()
list.files()
if(grep("specdata", directory) == 1) {
directory <- ("/users/leila/R-prog/specdata/")
}
directory
}
pollutantmean(specdata)
ls(pollutantmean)
pollutantmean <- function(directory = 'specdata', pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_loc <- directory
pollutant <- tolower(pollutant)
# default working directory
setwd("/users/leila/R-prog/")
getwd()
list.files()
if(grep("specdata", directory) == 1) {
directory <- ("/users/leila/R-prog/specdata/")
}
directory
}
pollutantmean(specdata)
pollutantmean <- function(directory = "specdata", pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data_loc <- directory
pollutant <- tolower(pollutant)
# default working directory
setwd("/users/leila/R-prog/")
getwd()
list.files()
if(grep("specdata", directory) == 1) {
directory <- ("/users/leila/R-prog/specdata/")
}
directory
}
pollutantmean(specdata)
pollutantmean <- function(directory = "specdata", pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data = lapply(id, function(i) read.csv(paste(directory, "/", formatC(i,
width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean(~leila/R-prog/specdata,nitrate,23)
pollutantmean <- function(directory = "specdata", pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data = lapply(id, function(i) read.csv(paste(directory, "/",
formatC(i, width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory = "~leila/R-prog/specdata", pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
data = lapply(id, function(i) read.csv(paste(directory, "/",
formatC(i, width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory = "~leila/R-prog/specdata", pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
directory
data = lapply(id, function(i) read.csv(paste(directory, "/",
formatC(i, width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
directory
pollutantmean <- function(directory = "~leila/R-prog/specdata", pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
directory <- directory
data = lapply(id, function(i) read.csv(paste(directory, "/",
formatC(i, width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean("~leila/R-prog/specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
getwd()
setwd(/Users/leila/R-prog)
setwd("/Users/leila/R-prog")
getwd()
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory = "~leila/R-prog/specdata", pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
directory <- directory
mydata = lapply(id, function(i) read.csv(paste(directory, "/",
formatC(i, width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(mydata), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
submit()
source(corr)
source(corr.R)
source("pollutantmean.R")
submit()
submit()
source("complete.R")
submit()
source("complete.R")
submit()
submit()
submit()
source("corr.R")
submit()
submit()
submit()
library(datasets)
data(iris)
?iris
mean(iris[iris$Species == "virginica",]$Sepal.Length)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
library(swirl)
rm(list=ls())
swirl()
res
res <- gather(students2, sex_class, count, -grade)
res
students2
res <- gather(students2, sex_class, count, -grade)
res
View(res)
sessionInfo()
bye()
?par
packageVersion("swirl")
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
head(low)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=4, col="magenta")
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(y ~ x, data=pollution, col="red")
boxplot(pm25 ~ region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region=="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution$pm25, region=="west"), col="green")
hist(subset(pm25, region=="west"), col="green")
help()
info
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(pollution$latitude,polution$pm25)
plot(pollution$latitude,pollution$pm25)
with(pollution, plot(latitude, pm25))
abline(v=12, lwd=2,lty=2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm,col=ppllution$region)
plot(pollution$latitude, ppm,col=pollution$region)
abline(h=12, lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
swirl()
install.packages('ProjectTemplate')
library('ProjectTemplate')
setwd("~/Coursera/ReproducibleResearch/RepData_PeerAssessment2")
setwd("~/Coursera/DataScience/ReproducibleResearch/RepData_PeerAssessment2")
setwd('SevereWeatherAssessment')
load.project()
install.packages('Lubridate')
install.packages('lubridate')
install.packages('log4r')
View(west)
library('ProjectTemplate')
load.project()
vignette("datatable-intro")
data.tables()
library(data.table)
data.tables()
datatables()
tables()
stormyEconImpact <- repdata.data.StormData[, lapply(.SD, sum, na.rm=TRUE), by=EVTYPE, .SDcols=c("PROPDMG", "CROPDMG") ]
head(stormyEconImpact)
?head
head(stormyEconImpact,n=10)
head(stormyEconImpact,n=25)
stormyEconImpact <- transform(stormyEconImpact, TotalDmg = PROPDMG + CROPDMG)
head(stormyEconImpact,n=25)
stormyEconImpactS <- stormyEconImpact[order(-TotalDmg)]
head(stormyEconImpactS,n=25)
stormyHealthImpact <- repdata.data.StormData[, lapply(.SD, sum, na.rm=TRUE), by=EVTYPE, .SDcols=c("FATALITIES", "INJURIES") ]
stormyHealthImpactFS <- stormyHealthImpact[order(-Fatalities)]
stormyHealthImpactFS <- stormyHealthImpact[order(-FATALITIES)]
head(stormyHealthImpactFS,n=25)
stormyHealthImpactIS <- stormyHealthImpact[order(-INJURIES)]
head(stormyHealthImpactIS,n=25)
hist(stormyHealthImpactFS[1:20])
hist(FATALITIES,stormyHealthImpactFS[1:20],)
stormyHealthImpactIStop <- stormyHealthImpactIS[1:25]
head(stormyHealthImpactIStop,n=30)
stormyHealthImpactFStop <- stormyHealthImpactFS[1:25]
head(stormyHealthImpactFStop,n=30)
qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFStop)
qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFStop[1:5])
qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFS[1:5])
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:5])
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:10])
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:5])
qplot(EVTYPE, TotalDmg, data=stormyEconImpactIS[1:5])
qplot(EVTYPE, TotalDmg, data=stormyEconImpactS[1:5])
qplot(EVTYPE, PROPDMG, data=stormyEconImpactS[1:5])
qplot(EVTYPE, CROPDMG, data=stormyEconImpactS[1:5])
qplot(EVTYPE, PROPDMG, data=stormyEconImpactS[1:5])
qplot(EVTYPE, CROPDMG, data=stormyEconImpactS[1:5])
qplot(EVTYPE, CROPDMG, data=stormyEconImpactS[1:7])
qplot(EVTYPE, TotalDmg, data=stormyEconImpactS[1:7])
qplot(EVTYPE, TotalDmg, data=stormyEconImpactS[1:5])
qplot(EVTYPE, PROPDMG, data=stormyEconImpactS[1:5])
qplot(EVTYPE, CROPDMG, data=stormyEconImpactS[1:5])
qplot(EVTYPE, PROPDMG, data=stormyEconImpactS[1:5])
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:5])
qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFS[1:5])
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:5])
head(stormyHealthImpactIS)
ggplot(storymyEconImpactS[1:5], aes(x=EVTYPE, colour=TotalDmg)) +
geom_density() +
ggtitle("Total Damage")
ggplot(stormyEconImpactS[1:5], aes(x=EVTYPE, colour=TotalDmg)) +
geom_density() +
ggtitle("Total Damage")
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:5])
hist(stormyHealthImpastIS[1:7])
hist(stormyHealthImpactIS[1:7])
hist(stormyHealthImpactIS[1:7]$INJURIES)
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:6])
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:6], geom = "histogram")
qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:6])
ip <- qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:6])
ip + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ip <- qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:25])
ip + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
fp <- qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFS[1:25])
fp + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
fp <- qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFS[1:25], log="xy")
fp + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
fp <- qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFS[1:25], log="x")
fp + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
fp <- qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFS[1:25], log="y")
fp + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ip <- qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:25], log="y")
ip + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
fp <- qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFS[1:25])
ip + qplot(EVTYPE, INJURIES, data=stormyHealthImpactIS[1:25], log="y")
head(stormyEconImpact)
head(stormyEconImpactS)
fp <- qplot(EVTYPE, FATALITIES, data=stormyHealthImpactFS[1:25])
fp + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(stormyEconImpactS[1:5], aes(x=EVTYPE, colour=TotalDmg)) +
geom_density() +
ggtitle("Total Damage")
pd <- qplot(EVTYPE, PROPDMG, data=stormyEconImpactS[1:25])
pd + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
cd <- qplot(EVTYPE, CROPDMG, data=stormyEconImpactS[1:25])
cd + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
td <- qplot(EVTYPE, TotalDmg, data=stormyEconImpactS[1:25])
td + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
str(repdata.data.StormData)
savehistory("~/Coursera/DataScience/ReproducibleResearch/RepData_PeerAssessment2/SevereWeatherAssessment/src/ScratchPadHome.Rhistory")
